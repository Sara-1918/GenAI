# -*- coding: utf-8 -*-
"""Emotion_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16eXr_n9Pkl8RxKn5cIv2DYwn_n9r1SR8
"""

import os
import numpy as np
import librosa
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report,accuracy_score
data_dir=r"/content/drive/MyDrive/voice"
def extract_features(file_path):
  try:
    audio, sr = librosa.load(file_path, duration=3,offset=0.5)
    mfccs = librosa.feature.mfcc(y=audio, sr=sr, n_mfcc=13)
    return np.mean(mfccs.T,axis=0)
  except Exception as e:
    print("Error loading file:",file_path)
    return None

features=[]
labels=[]
for folder in os.listdir(data_dir):
  emotion=folder.split('_')[-1].lower()
  folder_path=os.path.join(data_dir,folder)
  for filename in os.listdir(folder_path):
    if filename.endswith(".wav"):
      file_path=os.path.join(folder_path,filename)
      mfcc=extract_features(file_path)
      if mfcc is not None:
        features.append(mfcc)
        labels.append(emotion)

X=np.array(features)
y=np.array(labels)
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)
model=RandomForestClassifier()
model.fit(X_train,y_train)
y_pred=model.predict(X_test)
print("Accuracy:",accuracy_score(y_test,y_pred))
print("\n classification_report:\n",classification_report(y_test,y_pred))

from google.colab import files
uploaded=files.upload()
def predict_emotion(file_path):
  mfcc=extract_features(file_path)
  if mfcc is not None:
    return model.predict(mfcc.reshape(1,-1))[0]
  else:
    return "cloud not process audio"
for fname in uploaded.keys():
  print(f"{fname}: {predict_emotion(fname)}")

import pickle
import os

# Create the directory if it doesn't exist
output_dir = '/content/drive/MyDrive/GenAI/'
os.makedirs(output_dir, exist_ok=True)

with open(os.path.join(output_dir, 'emotion.pkl'), 'wb') as file:
    pickle.dump(model, file)

with open('/content/drive/MyDrive/GenAI/emotion.pkl', 'rb') as f:
    loaded_model = pickle.load(f)

# -*- coding: utf-8 -*-
"""Stock_market_predictor.py"""

import numpy as np
import matplotlib.pyplot as plt
import gradio as gr
import pickle
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import SimpleRNN, Dense

def predict_stock(prices_text):
    try:
        # Convert input text to list of floats
        input_list = [float(i) for i in prices_text.strip().split()]
        if len(input_list) != 5:
            return "‚ùå Please enter exactly 5 values.", None

        # Prepare and scale the data
        data = np.array(input_list).reshape(-1, 1)
        scaler = MinMaxScaler()
        scaled_data = scaler.fit_transform(data)

        # Create training sequences
        X, y = [], []
        for i in range(len(scaled_data) - 1):
            X.append(scaled_data[i:i+1])
            y.append(scaled_data[i+1])
        X = np.array(X).reshape(len(X), 1, 1)
        y = np.array(y)

        # Build the RNN model
        model = Sequential()
        model.add(SimpleRNN(units=10, activation='tanh', input_shape=(1, 1)))
        model.add(Dense(1))
        model.compile(optimizer='adam', loss='mean_squared_error')

        # Train the model
        model.fit(X, y, epochs=100, verbose=0)

        # Predict the next price
        last_input = scaled_data[-1].reshape(1, 1, 1)
        predicted_scaled = model.predict(last_input, verbose=0)
        predicted_price = scaler.inverse_transform(predicted_scaled)
        predicted_value = predicted_price[0][0]

        # Plot the results
        plt.figure(figsize=(8, 4))
        full_data = input_list + [predicted_value]
        plt.plot(full_data, marker='o', label='Stock Prices')
        plt.axvline(x=4, color='red', linestyle='--', label='Prediction Point')
        plt.title("üìà Stock Price Prediction using RNN")
        plt.xlabel("Time Step")
        plt.ylabel("Price")
        plt.legend()
        plt.grid(True)

        # Save the plot
        graph_path = "rnn_stock_prediction.png"
        plt.savefig(graph_path)
        plt.close()

        # Save the model (optional)
        with open("rnn_model.pkl", "wb") as f:
            pickle.dump((model, scaler), f)

        return f"‚úÖ Predicted next stock price: ‚Çπ{predicted_value:.2f}", graph_path

    except Exception as e:
        return f"‚ö†Ô∏è Error: {e}", None

# Gradio Interface
gr.Interface(
    fn=predict_stock,
    inputs=gr.Textbox(label="Enter 5 stock prices (e.g. 100 102 105 107 110)"),
    outputs=[
        gr.Text(label="Prediction"),
        gr.Image(type="filepath", label="Prediction Graph")
    ],
    title="üìä RNN-Based Stock Price Predictor",
    description="Enter 5 stock prices. The model trains and predicts the next value, then shows the graph and result."
).launch()